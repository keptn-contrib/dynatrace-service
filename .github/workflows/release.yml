name: Release
on:
  workflow_dispatch:
    inputs:
      semver-type:
        description: "Can be one of [major,minor,patch]. CAUTION: This will enforce a new release with the specified semantic version type bumped."
        required: false
        type: string
      keptn-version:
        description: "The version of Keptn this release has been tested with. This version also determines the value for the Distributor version in values.yml and will be included in all compatibility updates. E.g. `0.11.3`"
        required: true
        type: string
      dynatrace-version:
        description: "The version of Dynatrace this release has been tested with. This version will be included in all compatibility updates. E.g. `1.233`"
        required: true
        type: string

env:
  NODE_VERSION: 14
  KEPTN_BOT_NAME: "Keptn Contrib Bot"
  KEPTN_BOT_EMAIL: "keptn-contrib-bot@users.noreply.github.com"
  RELEASE_NOTES_FILE: "RELEASE-BODY.md" # If you change this, then also adapt .gitignore!
  COMPATIBILITY_MATRIX_FILE: "documentation/compatibility.md"

defaults:
  run:
    shell: bash
jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2
      - name: Unit tests
        uses: ./.github/actions/unit-tests

  prepare:
    name: Prepare release run
    runs-on: ubuntu-20.04
    outputs:
      next-version: ${{ steps.version_number.outputs.next-version }}
      branch: ${{ steps.current_branch.outputs.branch }}
    steps:
      - name: Check SemVer input
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            echo "SemVer Type is defined. Checking for valid SemVer type..."
            if [[ "$SEMVER_TYPE" == "major" ]] || [[ "$SEMVER_TYPE" == "minor" ]] || [[ "$SEMVER_TYPE" == "patch" ]]; then
              echo "::notice::SemVer Type is correctly set to $SEMVER_TYPE! Continuing with this version bump..."
            else
              echo "::error::ERROR: Enforced SemVer does not match any of [major,minor,patch]!"
              echo "Exiting..."
              exit 1
            fi
          else
            echo "::notice::No SemVer type defined, continuing with auto generated version number..."
          fi

      - name: Checkout repo
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Validate Keptn Version
        env:
          KEPTN_VERSION: ${{ github.event.inputs.keptn-version }}
        run: |
          ./gh-actions-scripts/check-version.sh "$KEPTN_VERSION" release-3

      - name: Validate Dynatrace Version
        env:
          DYNATRACE_VERSION: ${{ github.event.inputs.dynatrace-version }}
        run: |
          ./gh-actions-scripts/check-version.sh "$DYNATRACE_VERSION" release-2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Find next version number
        id: version_number
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            echo "Determine version based on next $SEMVER_TYPE version"
            npx standard-version@^9.3.2 \
              --skip.commit \
              --skip.tag \
              --skip.changelog \
              --release-as "$SEMVER_TYPE"
          else
            echo "Determine version based on next SemVer"
            npx standard-version@^9.3.2 \
              --skip.commit \
              --skip.tag \
              --skip.changelog
          fi

          NEXT_VERSION=$(cat VERSION.txt)
          echo "::set-output name=next-version::${NEXT_VERSION}"
          git checkout HEAD -- VERSION.txt

          echo "::notice::Next version number: ${NEXT_VERSION}"

      - name: Find current branch
        id: current_branch
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::${branch}"

  ############################################################################
  # Build Docker Image
  ############################################################################
  docker_build:
    needs: prepare
    name: Build Docker Image
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.prepare.outputs.next-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.0.2

      # load DOCKER_ORGANIZATION & IMAGE variable from .ci_env
      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Docker Build
        uses: keptn/gh-automation/.github/actions/docker-build@v1.5.3
        with:
          TAGS: |
            ${{ env.DOCKER_ORGANIZATION }}/${{ env.IMAGE }}:${{ env.VERSION }}
          BUILD_ARGS: |
            version=${{ env.VERSION }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  ############################################################################
  # Build Helm Chart
  ############################################################################
  build-helm-chart:
    needs: prepare
    name: Build Helm Charts
    uses: keptn-contrib/dynatrace-service/.github/workflows/build-helm-chart.yml@master
    with:
      branch: ${{ needs.prepare.outputs.branch }}
      version: ${{ needs.prepare.outputs.next-version }}
      distributor-version: ${{ github.event.inputs.keptn-version }}
      release: true

  ############################################################################
  # Release
  ############################################################################
  release:
    name: "Release"
    runs-on: ubuntu-20.04
    needs: [prepare, docker_build, build-helm-chart]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        env:
          KEPTN_BOT_NAME: ${{ env.KEPTN_BOT_NAME }}
          KEPTN_BOT_EMAIL: ${{ env.KEPTN_BOT_EMAIL }}
        run: |
          git config user.name "$KEPTN_BOT_NAME"
          git config user.email "$KEPTN_BOT_EMAIL"

      - name: Prepare GitHub Release Notes
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          # Delete pre-release tags to be able to generate a changelog from last 'real' release
          # This is a workaround for a known limitation of standard-version
          # Reference: https://github.com/conventional-changelog/standard-version/issues/203#issuecomment-872415140
          git tag -l | grep -vE '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | xargs git tag -d

          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.2 \
              -i "${{ env.RELEASE_NOTES_FILE }}" \
              --skip.commit \
              --skip.tag \
              --header "" \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.2 \
              -i "${{ env.RELEASE_NOTES_FILE }}" \
              --skip.commit \
              --skip.tag \
              --header ""
          fi

      - name: Update Github Release Notes with version compatibility
        env:
          KEPTN_VERSION: ${{ github.event.inputs.keptn-version }}
          DYNATRACE_VERSION: ${{ github.event.inputs.dynatrace-version }}
        run: |
          sed -r "0,/^##(#)? \[[0-9]+\.[0-9]+\.[0-9]+\].*$/ s//&\n\n### Release validated with\n | Dynatrace-service: \`$(cat VERSION.txt)\` | Keptn: \`$KEPTN_VERSION\` | Dynatrace: \`$DYNATRACE_VERSION\` |\n |---|---|---|/" \
            -i "${{ env.RELEASE_NOTES_FILE }}"

      - name: Bump Version Compatibility
        # also adding the file to git to have it in the same commit later on
        env:
          KEPTN_VERSION: ${{ github.event.inputs.keptn-version }}
          DYNATRACE_VERSION: ${{ github.event.inputs.dynatrace-version }}
        run: |
          printf '| `%s` | `%s` | `%s` |\n' \
            "$(cat VERSION.txt)" "$KEPTN_VERSION" "$DYNATRACE_VERSION" \
            >> "${{ env.COMPATIBILITY_MATRIX_FILE }}"
          git add "${{ env.COMPATIBILITY_MATRIX_FILE }}"

      - name: Update README.md
        # also adding the file to git to have it in the same commit later on
        env:
          KEPTN_VERSION: ${{ github.event.inputs.keptn-version }}
          DYNATRACE_VERSION: ${{ github.event.inputs.dynatrace-version }}
        run: |
          sed "s/^.*|.*Dynatrace-service.*|.*Keptn.*|.*Dynatrace.*$/| Dynatrace-service: \`$(cat VERSION.txt)\` | Keptn: \`$KEPTN_VERSION\` | Dynatrace: \`$DYNATRACE_VERSION\` |/" \
            -i README.md
          git add README.md

      - name: Prepare Release Package
        id: prepare-release-package
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.2 \
              --skip.commit \
              --skip.tag \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.2 \
              --skip.commit \
              --skip.tag
          fi

      - name: Update Changelog with version compatibility
        env:
          KEPTN_VERSION: ${{ github.event.inputs.keptn-version }}
          DYNATRACE_VERSION: ${{ github.event.inputs.dynatrace-version }}
        run: |
          sed -r "0,/^##(#)? \[[0-9]+\.[0-9]+\.[0-9]+\].*$/ s//&\n\n### Release validated with\n | Dynatrace-service: \`$(cat VERSION.txt)\` | Keptn: \`$KEPTN_VERSION\` | Dynatrace: \`$DYNATRACE_VERSION\` |\n |---|---|---|/" \
            -i CHANGELOG.md
          git add CHANGELOG.md

      - name: Create Release Package
        id: create-release-package
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
        run: |
          echo "🚀 Creating release package now..."

          # to also include the changes to the compatibility matrix we need to use the '-a' flag
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.2 -a \
              --skip.changelog \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.2 -a \
              --skip.changelog
          fi

          TAG="$(git describe --tags --abbrev=0)"
          echo "::set-output name=tag-name::$TAG"

          echo "Sign off commit"
          git commit --amend --signoff --no-edit

          echo "Tag again due to amending last commit"
          git tag -f -a -m "release $TAG" "$TAG"

      - name: Push changes to repo
        id: push-changes
        env:
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching previously deleted old tags..."
          git fetch origin --tags -f

          TARGET_BRANCH=release/$RELEASE_TAG

          # delete existing branch just in case
          git branch -D $TARGET_BRANCH &>/dev/null || true

          # create new branch
          git checkout -b $TARGET_BRANCH

          # push changes
          echo "⚡️ Pushing changes to remote repository..."
          git push -f --follow-tags --set-upstream origin $TARGET_BRANCH

      - name: Create GitHub Pull Request
        env:
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "build: release $RELEASE_TAG" --body "Updates to CHANGELOG.md, VERSION.txt, README.md and compatibility.md" --base "${GITHUB_REF_NAME}"

      - name: Download Release Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./dist

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          gh release create "${{ env.RELEASE_TAG }}" --notes-file "${{ env.RELEASE_NOTES_FILE }}" --title "${{ env.RELEASE_TAG }}" ./dist/installer/*.tgz
