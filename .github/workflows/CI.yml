name: CI
on:
  # allow manual dispatch
  workflow_dispatch:
  
  # always execute docker build when something is pushed to master or release-* branches
  push:
    branches:
      - 'master'
      - 'release-*'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'master'
      - 'release-*'
defaults:
  run:
    shell: bash
jobs:
  ############################################################################
  # Prepare CI Run (determine version, git sha, datetime, ...)               #
  ############################################################################
  prepare_ci_run:
    name: Prepare CI Run
    uses: keptn/gh-automation/.github/workflows/prepare-ci.yml@v1.4.0

  ############################################################################
  # Unit tests                                                               #
  ############################################################################
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Unit tests
        uses: ./.github/actions/unit-tests

  ############################################################################
  # Build Helm Charts                                                        #
  ############################################################################
  helm_charts_build:
    needs: prepare_ci_run
    name: Build Helm Charts
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATETIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.4.0

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Build Helm Chart
        id: build_helm_chart
        run: |
          if [[ "$BRANCH" == "master" ]]; then
            # use VERSION.DATETIME for the image tag (e.g., nightly build)
            ./gh-actions-scripts/build_helm_chart.sh "${VERSION}" "${VERSION}.${DATETIME}" "${IMAGE}"
          else
            # just use VERSION for the image tag
            ./gh-actions-scripts/build_helm_chart.sh "${VERSION}" "${VERSION}" "${IMAGE}"
          fi

      - name: Upload Helm Chart as an artifact
        id: upload_helm_chart
        uses: actions/upload-artifact@v2
        with:
          name: installer
          path: installer/*.tgz

  ############################################################################
  # Build Docker Image                                                      #
  ############################################################################
  docker_build:
    needs: [prepare_ci_run, unit-tests]
    name: Docker Build
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATETIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.4.0

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - id: docker_login
        name: Docker Login
        # only run docker login on pushes; also for PRs, but only if this is not a fork
        if: (github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == github.repository)
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't push images to dockerhub
        uses: docker/login-action@v1.12.0
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: docker_build
        name: Docker Build
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.IMAGE }}"
          DATETIME: ${{ env.DATETIME }}

      - id: create_docker_build_report
        name: Create Docker Build Report
        run: |
          echo "The following Docker Images have been built: " > docker_build_report_final.txt
          cat docker_build_report.txt >> docker_build_report_final.txt || echo "* No images have been built or uploaded" >> docker_build_report_final.txt
          echo "---"
          cat docker_build_report_final.txt

      - id: report_docker_build_to_pr
        # Comment the docker build report to the PR
        # This only works for PRs coming from inside of the repo, not from forks
        name: Report Docker Build to PR
        if: (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: docker_build_report_final.txt
          recreate: true

  store-output-in-build-config:
    name: "Store output of last step in build-config.env"
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    steps:
      - name: Create build config file
        env:
          BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
          BRANCH_SLUG: ${{ needs.prepare_ci_run.outputs.BRANCH_SLUG }}
          VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
          DATETIME: ${{ needs.prepare_ci_run.outputs.DATETIME }}
          GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
        run: |
          echo "BRANCH=${BRANCH}" >> build-config.env
          echo "BRANCH_SLUG=${BRANCH_SLUG}" >> build-config.env
          echo "VERSION=${VERSION}" >> build-config.env
          echo "DATETIME=${DATETIME}" >> build-config.env
          echo "GIT_SHA=${GIT_SHA}" >> build-config.env

      - name: Upload build config as artifact
        id: upload_build_config
        uses: actions/upload-artifact@v2
        with:
          name: build-config
          path: build-config.env
